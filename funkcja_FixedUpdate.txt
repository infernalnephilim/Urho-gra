
void Character::FixedUpdate(float timeStep)
{
	RigidBody* body = GetComponent<RigidBody>();

	/// \todo Could cache the components for faster access instead of finding them each frame

	AnimationController* animCtrl = GetComponent<AnimationController>();

	// Update the in air timer. Reset if grounded
	if (!onGround_)
		inAirTimer_ += timeStep;
	else
		inAirTimer_ = 0.0f;
	// When character has been in air less than 1/10 second, it's still interpreted as being on ground
	bool softGrounded = inAirTimer_ < INAIR_THRESHOLD_TIME;

	// Update movement & animation
	const Quaternion& rot = node_->GetRotation();
	Vector3 moveDir = Vector3::ZERO;
	const Vector3& velocity = body->GetLinearVelocity();
	// Velocity on the XZ plane
	Vector3 planeVelocity(velocity.x_, 0.0f, velocity.z_);

	if (controls_.IsDown(CTRL_FORWARD))
		moveDir += Vector3::FORWARD;
	/*if (controls_.IsDown(CTRL_BACK))
	moveDir += Vector3::BACK;*/
	
	if (body->GetPosition().x_ >= 1.5f)
	{
		onLeftLane_ = false;
		onMiddleLane_ = false;
		onRightLane_ = true;
		
		if (okToJump_ == true) {
			body->ApplyImpulse(Vector3(3.0f - body->GetPosition().x_, 0.0f, 0.0f));
		}
		
	}
	else if (body->GetPosition().x_ <= -1.5f)
	{
		onLeftLane_ = true;
		onMiddleLane_ = false;
		onRightLane_ = false;
		
		
		if (okToJump_ == true) {
			body->ApplyImpulse(Vector3(-3.0f - body->GetPosition().x_, 0.0f, 0.0f));
		}
		
	}
	else {
		onLeftLane_ = false;
		onMiddleLane_ = true;
		onRightLane_ = false;
		
		if (okToJump_ == true) {
			body->ApplyImpulse(Vector3(0.0f - body->GetPosition().x_, 0.0f, 0.0f));
		}
		
	}
	
	/*
	if (onLeftLane_ == true)
	{
		if (okToJump_ == true) {
			body->ApplyImpulse(Vector3(-3.0f - body->GetPosition().x_, 0.0f, 0.0f));
		}
	}
	else if (onMiddleLane_ == true) 
	{
		if (okToJump_ == true) {
			body->ApplyImpulse(Vector3(0.0f - body->GetPosition().x_, 0.0f, 0.0f));
		}
	}
	else if (onRightLane_ == true) 
	{
		if (okToJump_ == true) {
			body->ApplyImpulse(Vector3(3.0f - body->GetPosition().x_, 0.0f, 0.0f));
		}
	}
	*/
	/*
	std::cout << "LeftLane = " << onLeftLane_ << std::endl;
	std::cout << "MiddleLane = " << onMiddleLane_ << std::endl;
	std::cout << "RightLane = " << onRightLane_ << std::endl;
	*/
	
	if (controls_.IsDown(CTRL_RIGHT))
	{
		if (okToJump_ && onRightLane_ == false)
		{
			body->ApplyImpulse(Vector3(0.5f, 0.8f, 0.1f));
			okToJump_ = false;
			
			/*
			if (onMiddleLane_ == true) {
				onMiddleLane_ = false;
				onRightLane_ = true;

				if (okToJump_ == true) {
					body->ApplyImpulse(Vector3(-3.0f - body->GetPosition().x_, 0.0f, 0.0f));
				}
			}
			else if (onLeftLane_ == true) {
				onLeftLane_ = false;
				onMiddleLane_ = true;
				if (okToJump_ == true) {
					body->ApplyImpulse(Vector3(0.0f - body->GetPosition().x_, 0.0f, 0.0f));
				}
			}
			*/
		}

		//moveDir += Vector3::RIGHT;////////////////////

	}

	if (controls_.IsDown(CTRL_LEFT))
	{
		//moveDir += Vector3::LEFT;
		if (okToJump_ && onLeftLane_ == false)
		{
			body->ApplyImpulse(Vector3(-0.5f,0.8f,0.1f));
			okToJump_ = false;
			/*
			if (onMiddleLane_ == true) {
				onMiddleLane_ = false;
				onLeftLane_ = true;
				if (okToJump_ == true) {
					body->ApplyImpulse(Vector3(-3.0f - body->GetPosition().x_, 0.0f, 0.0f));
				}
			} else if(onRightLane_ == true){
				onRightLane_ = false;
				onMiddleLane_ = true;
				if (okToJump_ == true) {
					body->ApplyImpulse(Vector3(0.0f - body->GetPosition().x_, 0.0f, 0.0f));
				}
			}
			*/
		}
	}


	// Normalize move vector so that diagonal strafing is not faster
	if (moveDir.LengthSquared() > 0.0f)
		moveDir.Normalize();

	// If in air, allow control, but slower than when on ground
	body->ApplyImpulse(rot * moveDir * (softGrounded ? MOVE_FORCE : INAIR_MOVE_FORCE));

	if (softGrounded)
	{
		// When on ground, apply a braking force to limit maximum ground velocity
		Vector3 brakeForce = -planeVelocity * BRAKE_FORCE;
		body->ApplyImpulse(brakeForce);

		// Jump. Must release jump control inbetween jumps
		if (controls_.IsDown(CTRL_JUMP))
		{
			if (okToJump_)
			{
				body->ApplyImpulse(Vector3::UP * JUMP_FORCE);
				okToJump_ = false;
				animCtrl->PlayExclusive("bin/Data/Models/Mutant/Mutant_Jump.ani", 0, false, 0.2f);
			}
		}
		else
			okToJump_ = true;
	}

	// Play walk animation if moving on ground, otherwise fade it out

	if (!onGround_)
	{
		animCtrl->PlayExclusive("bin/Data/Models/Mutant/Mutant_Jump.ani", 0, false, 0.2f);
	}
	else
	{
		if (softGrounded && !moveDir.Equals(Vector3::ZERO)) {
			animCtrl->PlayExclusive("Models/Kachujin/Kachujin_Walk.ani", 0, true, 0.2f);
		}
		else
		{
			animCtrl->Stop("Models/Kachujin/Kachujin_Walk.ani", 0.2f);
		}
		// Set walk animation speed proportional to velocity
		animCtrl->SetSpeed("Models/Kachujin/Kachujin_Walk.ani", planeVelocity.Length() * 0.3f);
	}
	// Reset grounded flag for next frame
	onGround_ = false;
}